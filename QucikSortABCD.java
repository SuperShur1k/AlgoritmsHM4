package org.example.lesson4;
// TAsk2
//–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±—É–∫–≤—ã.
// –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π.
// –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ.
//üëâüëâüëâ  –ù–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞: "poiuytrewqlkjhgfdsamnbvcxz"
//–ù–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ABCDEFGHIJKLMNOPQRSTUVWXYZ (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)

public class QucikSortABCD {
    private static void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static int partition(char[] arr, int low, int high) {
        char pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    private static void quickSort(char[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    public static void sort(char[] arr) {
        int n = arr.length;
        quickSort(arr, 0, n - 1);
    }

    public static void main(String[] args) {
        String input = "poiuytrewqlkjhgfdsamnbvcxz";

        char[] arr = input.toUpperCase().toCharArray();

        sort(arr);

        String sorted = new String(arr);

        System.out.println(sorted);
    }
}
